1. 3 bugs
2. you fix bugs by incrementing by 4 not 1 and subtracting the zero at the end.
3. run bit by bit until you encounter the error then fix
4. t1
5. t2
6. la 
7. line 34
8. 	subu	$sp,$sp,24        #subtract 24 from stack
	sw	$31,16($sp)	  #save return address on the stack
	jal	__main		  #start of main code
	la	$9,source		  #loads address from source to t1
	lw	$2,0($9)		  #loads value from the sorce to v0
	move	$8,$0			  #t0 = 0
#c: t0 = 0;
	beq	$2,$0,$L8		  #if v0(source value) = 0 go to L8
#c: if v0==0 do L8
	move	$7,$0			  # a3 =0
#c: a3 = 0;
	la	$10,dest		  #load address from dest to t2 
$L6: #the loop
	addu	$8,$8,1		  #t0 = t0 + 1 (increments t0)
c: t0++;
	sll	$3,$8,2		  # shift t0 2 places L store in v1
c: v1 = t0/4;
	addu	$5,$7,$9		  # add a3 and t1 store in a1
c: a1= a3 + t1;
	addu	$2,$3,$9		  #add v0 and v1 store in t1
c:t1 = v0+v1;
	addu	$6,$7,$10		  #add a3 and t2 store in a2
c:a2 = a3 + t2;
	lw	$4,0($2)		  #load a0 from addr stored in v0 
c:a0 = *v0;
	move	$7,$3			  #a3 now = v1
c:a3 = v1;
	lw	$3,0($5)		  #load value in loc a1 store in v1
c: a1 = *v1;
	#nop					
	sw	$3,0($6)		  #store val in v1 in loc a2
c:*v1 = a2;
	bne	$4,$0,$L6		  #if a0 != 0 re do loop
c:if a0 != 0 re run.
$L8: #seems to be the exit commands of the function
	la	$4,$LC0		  # a0 = LC0
	move	$5,$8			  # a1 = t0
c:a1 = t0;
	jal	printf		  # print statement
c:printf("");
	lw	$31,16($sp)	  # load return address of stack
c:no real equivalent
	move	$2,$0			  # v0 = 0
c:v0=0;
	addu	$sp,$sp,24		  # reset stack pointer
c:no real equivalent
	j	$31			  # go to return address.
c:no real equivalent